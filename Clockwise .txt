class Pos { 
	 public int x;
	 public int y;
	 public int dx;
	 public int dy;
	 public Pos(int x, int y, int dx, int dy){
		 this.x = x;   this.y = y;   this.dx = dx;   this.dy = dy; 
	 }
	 public Pos(Pos t)  {
		 x = t.x;   y = t.y;   dx = t.dx;   dy = t.dy;
		 }
	 }
class Mat {
	private int row; // 行数
	private int col; // 列数

	public Mat() {
		row = 5;
		col = 5;
	}

	public Mat(int row, int col) {
		this.row = row;
		this.col = col;
	}

	public void showArray(int[][] ar) {
		//System.out.println();
		for (int i = 0; i < ar.length; i++) {
			for (int j = 0; j < ar[i].length; j++) {
				System.out.print(String.format("%3d ", ar[i][j]));
			}
			System.out.println();
		}
	}

	public void print() {
		int n = row * col; // 总的元素个数
		int[][] ar = new int[row][col]; // 创建临时的二维数组，向其中填写数字
		Pos cur = initPos(); // 待填入位置初始参数
		int m = 1; // 待填入的初始数字
		for (;;) {
			ar[cur.y][cur.x] = m; // 填入数字
			if (m >= n)
				break;
			cur = getNextPos(ar, cur); // 求下一个位置参数
			m++; // 求下一个被填入的数字
		}
		showArray(ar);
	}

	protected Pos initPos() {
		return new Pos(0, 0, 1, 0);
	}



protected Pos getNextPos(int[][] ar, Pos cur) {
	Pos t = new Pos(cur);

	t.x += t.dx; // 按当前方向试走一下
	t.y += t.dy; // 位置没有越界
	if (t.x >= 0 && t.x < col && t.y >= 0 && t.y < row && ar[t.y][t.x] == 0) {
		// 该位置也没有被填充过
		return t;
	}else { // 转向后，再试验走到下一个位置
		t.x -= t.dx;
		t.y -= t.dy;
		t = changeDirection(cur);
		return getNextPos(ar, t);
	}
}

protected Pos changeDirection(Pos p) {
	Pos t = new Pos(p);
//	if (p.dx == 0 && p.dy == 1) { // 向右转向下
//		t.dx = 1;
//		t.dy = 0;
//	} else if (p.dx == 1 && p.dy == 0) { // 向下转向左
//		t.dx = 0;
//		t.dy = -1;
//	} else if (p.dx == 0 && p.dy == -1) { // 向左转向上
//		t.dx = -1;
//		t.dy = 0;
//	} else if (p.dx == -1 && p.dy == 0) { // 向上转向右
//		t.dx = 0;
//		t.dy = 1;
//	}
	
	if (p.dx == 0 && p.dy == 1) { // 向右转向下
		t.dx = -1;
		t.dy = 0;
	} else if (p.dx == 1 && p.dy == 0) { // 向下转向左
		t.dx = 0;
		t.dy = 1;
	} else if (p.dx == 0 && p.dy == -1) { // 向左转向上
		t.dx = 1;
		t.dy = 0;
	} else if (p.dx == -1 && p.dy == 0) { // 向上转向右
		t.dx = 0;
		t.dy = -1;
	}
	return t;
}
}
	public static void main(String[] args){
		//0~9的21次方给数组x[]
//	    for(int i=0; i<10; i++){
//	        x[i] = pow_21(i);//pow_21 方法计算21次方
//	    }
//	    int[] a = new int[10];//记录每个数字出现的次数
// 
//	   f(a,0,0);//递归主方法
		Mat a = new Mat();
		a.print(); 
		int n=100;
		int[] sign = new int[]{-1,0,1};	// 定义符号
}